#villes
#bloc=[0,1,2,3,4,5,6,7,8,9,10,11,12,13]-1=erreur pas défini/0=route <>/1=^v/2=<^/3=<v,4=^>/5=v>/6=<^v/7=<v>/8=^v>/9=<^>/10=<^v>/11=bâtiments,12=eau naturelle,13=forêts,14=pont <>, 15= pont ^v 
#pour montrer comment sont visuellement les tiles
réf=[[[12, 0], [14, 0], [7, 0], [15, 0], [12, 0]],
 [[13, 0], [5, 0], [6, 0], [-1, 0], [13, 0]],
 [[13, 0], [8, 0], [10, 0], [3, 0], [13, 0]],
 [[11, 0], [1, 0], [4, 0], [2, 0], [11, 0]],
 [[10, 0], [9, 0], [7, 0], [0, 0], [10, 0]]] 
#ville finale pour test contrer ville random
ville_parfaite=[[[11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [8, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [7, 0],
  [9, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [6, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [8, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [1, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [1, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [8, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [10, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [6, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [1, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [1, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[0, 0],
  [10, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [9, 0],
  [7, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [10, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [14, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [10, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [1, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [1, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [8, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [10, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [6, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [1, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [1, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]],
 [[11, 0],
  [8, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [7, 0],
  [9, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [0, 0],
  [6, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [8, 0]],
 [[11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [11, 0],
  [1, 0],
  [11, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [12, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [13, 0],
  [11, 0],
  [1, 0]]]
  #TODO: filtre bleu, créer ville optimisée, modif visu pour obtenir l'échelle sur lescases/ retire l'échelle
#Librairies, constante
from random import randint
import matplotlib.pyplot as plt
from PIL import Image
#bloc=[0,1,2,3,4,5,6,7,8,9,10,11,12,13]-1=erreur pas défini/0=route <>/1=^v/2=<^/3=<v,4=^>/5=v>/6=<^v/7=<v>/8=^v>/9=<^>/10=<^v>/11=bâtiments,12=eau naturelle,13=forêts,14=pont <>, 15= pont ^v 
#eau= flottant entre 0 et 1, 0 pas du tout d'eau, 1 100% innondé
#voisins, pour chaque état liste de ses voisins possible dans chaque direction
voisins_haut=[[],[1,3,5,6,7,8,10],[1,3,5,6,7,8,10],[],[1,3,5,6,7,8,10],[],[1,3,5,6,7,8,10],[],[1,3,5,6,7,8,10],[1,3,5,6,7,8,10],[1,3,5,6,7,8,10],[],[],[],[],[1,3,5,6,7,8,10]]
voisins_bas=[[],[1,2,4,6,8,9,10],[],[1,2,4,6,8,9,10],[],[1,2,4,6,8,9,10],[1,2,4,6,8,9,10],[1,2,4,6,8,9,10],[1,2,4,6,8,9,10],[],[1,2,4,6,8,9,10],[],[],[],[],[1,2,4,6,8,9,10]]
voisins_droite=[[0,2,3,6,7,9,10],[],[],[],[0,2,3,6,7,9,10],[0,2,3,6,7,9,10],[],[0,2,3,6,7,9,10],[0,2,3,6,7,9,10],[0,2,3,6,7,9,10],[0,2,3,6,7,9,10],[],[],[],[0,2,3,6,7,9,10],[]]
voisins_gauche=[[0,4,5,7,8,9,10],[],[0,4,5,7,8,9,10],[0,4,5,7,8,9,10],[],[],[0,4,5,7,8,9,10],[0,4,5,7,8,9,10],[],[0,4,5,7,8,9,10],[0,4,5,7,8,9,10],[],[],[],[0,4,5,7,8,9,10],[]]
#Création ville
def creationgrille(n=5):
    '''n entier naturel
renvoie une grille(liste de listes) de taille n de n liste [-1,0], états initial de la grille'''
    assert type(n)==int
    grille=[]
    for i in range(n):
        grille.append([])
        for j in range(n):
            grille[i].append([-1,0])
    return grille
def vérif(grille,n=-1):
    assert len(grille)==(len(grille[0]))>0
    '''grille: liste de listes de listes
n= entier entre -1 et 13
renvoie un string selon si il y a une case d'état d'indice n dans la liste, et si oui renvoie la liste de toutes les positions'''
    dedans=[]
    for j in range(len(grille)):
        for i in range(len(grille)):
            if grille[j][i][0]==n:
                dedans.append((j,i))
    if len(dedans)!=0:
        return str(n)+' est dans la ville',dedans
    return str(n)+' est pas dans la ville'
def riviére(grille):
    '''grille: liste de listes de listes
modifie la liste pour avoir une riviére (droite dans la liste de liste d'état 12). renvoie rien'''
    assert len(grille)==(len(grille[0]))
    m=len(grille)
    r=randint(0,m-2)
    if randint(0,1):
        for i in range(m):
            grille[i][r][0]=12
    else:
        for i in range(m):
            grille[r][i][0]=12
    
def route_initialisation(grille,tile=10):
    '''grille: liste de listes de listes
tile: entier entre -1 et 13
modifie la grille pour remplacer une case vide par une case de route. renvoie les coordonées de la case modifié'''
    assert len(grille)==(len(grille[0]))
    le=len(grille)-2
    x=randint(1,le)
    y=randint(1,le)
    if grille[x][y][0]==-1:
        grille[x][y][0]=tile
        return (x,y)
    return route_initialisation(grille,tile)
def route_suite(grille,coordo,prev=0):
    '''grille: liste de listes de listes, les éléments 0 de chacunes des listes de listes de listes et -1 sauf 1
coordo: couple de 2 entiers entre 0 et len(grille)
prev: entier entre 0 et 4
étend la route en modifiant les voisins de l'état de la liste au coordonées défini parmis ceux possible. prev=0 pour initier, ou entre 1 et 4 pour réduire les calculs'''
    assert len(grille)==(len(grille[0]))
    x=coordo[0]
    y=coordo[1]
    n=len(grille)
    tile=grille[x][y][0]
    if x>=n or y>=n or tile in [-1,11,12,13]:
        return
    #haut
    if x>0 and prev!=3:
        if len(voisins_haut[tile])!=0:
            if grille[x-1][y][0]==-1:
                if randint(0,1)==1:
                    grille[x-1][y][0]=voisins_haut[tile][randint(1,6)]
                else: 
                    grille[x-1][y][0]=1
                route_suite(grille,(x-1,y),1)
            elif grille[x-1][y][0]==12: #ponts
                if randint(0,2)==1 and grille[x-2][y][0]==-1:
                    grille[x-1][y][0]=15
                    route_suite(grille,(x-1,y),1)
                else:
                    grille[x][y][0]=11
                    return
            else:
                grille[x][y][0]=11
                return
    #droite
    if y<n-1 and prev!=4:
        if len(voisins_droite[tile])!=0:
            if grille[x][y+1][0]==-1:
                if randint(0,1)==1:
                    grille[x][y+1][0]=voisins_droite[tile][randint(1,6)]
                else:
                    grille[x][y+1][0]=0
                route_suite(grille,(x,y+1),2)
            elif grille[x][y+1][0]==12:
                if randint(0,2)==1 and grille[x][y+2][0]==-1:
                    grille[x][y+1][0]=14
                    route_suite(grille,(x,y+1),2)
                else:
                    grille[x][y][0]=11
                    return
            else:
                grille[x][y][0]=11
                return
    #bas
    if x<n-1 and prev!=1:
        if len(voisins_bas[tile])!=0:
            if grille[x+1][y][0]==-1:
                if randint(0,1)==1:
                     grille[x+1][y][0]=voisins_bas[tile][randint(1,6)]
                else:
                     grille[x+1][y][0]=1
                route_suite(grille,(x+1,y),3)
            elif grille[x+1][y][0]==12:
                if randint(0,2)==1 and grille[x+2][y][0]==-1:
                    grille[x+1][y][0]=15
                    route_suite(grille,(x+1,y),3)
                else:
                    grille[x][y][0]=11
                    return
            else:
                grille[x][y][0]=11
                return
    #gauche
    if y>0 and prev!=2:
        if len(voisins_gauche[tile])!=0:
            if grille[x][y-1][0]==-1:
                if randint(0,1)==1:
                    grille[x][y-1][0]=voisins_gauche[tile][randint(1,6)]
                else:
                    grille[x][y-1][0]=0
                route_suite(grille,(x,y-1),4)
            elif grille[x][y-1][0]==12:
                if randint(0,2)==1 and grille[x][y-2][0]==-1:
                    grille[x][y-1][0]=14
                    route_suite(grille,(x,y-1),4)
                else:
                    grille[x][y][0]=11
                    return
            else:
                grille[x][y][0]=11
                return
def route_complete(grille):
    '''grille:liste de listes de listes
rajoute une route sur la grille, et renvoie la grille'''
    assert len(grille)==(len(grille[0]))
    return route_suite(grille,route_initialisation(grille,10),0)
def bâtiments(grille):
    '''grille:liste de listes de listes
modifie la grille pour ajouter des bâtiments là où c'est possible'''
    assert len(grille)==(len(grille[0]))
    m=len(grille)
    for i in range(m):
        for j in range(m):
            if grille[i][j][0]==11 and randint(0,1):
                if  i>0 and grille[i-1][j][0]==-1:
                     grille[i-1][j][0]=11
                if  i<m-1 and grille[i+1][j][0]==-1:
                     grille[i+1][j][0]=11
                if  j<m-1 and grille[i][j+1][0]==-1:
                     grille[i][j+1][0]=11
                if  j>0 and grille[i][j-1][0]==-1:
                     grille[i][j-1][0]=11
def forêt(grille):
    '''grille:liste de listes de listes
remplace tout les états -1 de l'indice 0 des listes de listes de listes par 13 (forêt)'''
    assert len(grille)==(len(grille[0]))
    for i in range(len(grille)):
        for j in range(len(grille)):
            if grille[i][j][0]==-1:
                grille[i][j][0]=13
def finalisation(grille):
    '''grille: liste de listes de listes
remets à l'état inital les variable d'inondation'''
    assert len(grille)==(len(grille[0]))
    m=len(grille)
    for i in range(m):
        for j in range(m):
            grille[i][j][1]=0
#visualisation
                #filtre pour eau (besoin maxime) (matplotlib animation
def forward(n):
  return n*(1/64)
def backward(n):
  return 64*n
def get_concat_h(im1, im2):
    '''im1,im2: PIL.PngImagePlugin.PngImageFile de même hauteur
renvoie une concaténation de l'image 1 (à gauche) et de l'image 2 (à droite)'''
    assert im1.height==im2.height
    dst = Image.new('RGB', (im1.width + im2.width, im1.height))
    dst.paste(im1, (0, 0))
    dst.paste(im2, (im1.width, 0))
    return dst
def get_concat_v(im1, im2):
    '''im1,im2: PIL.PngImagePlugin.PngImageFile de même longueuer 
renvoie une concaténation de l'image 1 (en haut) et de l'image 2 (en bas)'''
    assert im1.width==im2.width
    dst = Image.new('RGB', (im1.width, im1.height + im2.height))
    dst.paste(im1, (0, 0))
    dst.paste(im2, (0, im1.height))
    return dst
def visu(grille=réf): #TODO: rajouter un truc qui s'update toute les x pour voir évolution innondation (rajouter filtre bleu au case inondée en proportion du taux d'inondation)
    '''grille: liste de listes de listes
affiche une représentation visuelle de la grille.renvoie rien'''
    assert len(grille)==(len(grille[0]))
    images=[]
    for i in range(len(grille)):
        im=Image.open(str(grille[i][0][0])+'.png')
        for j in range(1,len(grille)):
            im2=Image.open(str(grille[i][j][0])+'.png')
            im=get_concat_h(im,im2)
        images.append(im)
    image=images[0]
    for k in range(1,len(grille)):
        image=get_concat_v(image,images[k])
    grid=plt.imshow(image)
    grid.axes.get_xaxis().set_visible(False)
    grid.axes.get_yaxis().set_visible(False)
    plt.show()
#test zone, please ignore
n=20
#[[[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [13, 0], [13, 0], [1, 0], [8, 0], [6, 0], [8, 0], [0, 0], [0, 0], [2, 0], [8, 0], [10, 0], [0, 0], [11, 0], [1, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [13, 0], [13, 0], [1, 0], [11, 0], [11, 0], [1, 0], [5, 0], [0, 0], [3, 0], [11, 0], [8, 0], [11, 0], [5, 0], [9, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [13, 0], [13, 0], [4, 0], [9, 0], [0, 0], [10, 0], [6, 0], [11, 0], [8, 0], [3, 0], [11, 0], [0, 0], [6, 0], [11, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [1, 0], [11, 0], [6, 0], [1, 0], [11, 0], [0, 0], [0, 0], [10, 0], [9, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [1, 0], [11, 0], [1, 0], [1, 0], [11, 0], [3, 0], [11, 0], [9, 0], [11, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [13, 0], [13, 0], [13, 0], [5, 0], [3, 0], [11, 0], [1, 0], [1, 0], [8, 0], [11, 0], [1, 0], [11, 0], [11, 0], [11, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [14, 0], [0, 0], [0, 0], [0, 0], [6, 0], [4, 0], [3, 0], [1, 0], [1, 0], [11, 0], [5, 0], [6, 0], [11, 0], [0, 0], [7, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [13, 0], [13, 0], [13, 0], [1, 0], [13, 0], [1, 0], [11, 0], [10, 0], [0, 0], [11, 0], [4, 0], [7, 0], [0, 0], [2, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [13, 0], [13, 0], [13, 0], [1, 0], [13, 0], [1, 0], [13, 0], [11, 0], [11, 0], [0, 0], [11, 0], [1, 0], [13, 0], [11, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [13, 0], [13, 0], [13, 0], [11, 0], [3, 0], [4, 0], [0, 0], [3, 0], [11, 0], [7, 0], [0, 0], [2, 0], [13, 0], [1, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [13, 0], [13, 0], [11, 0], [11, 0], [1, 0], [5, 0], [11, 0], [1, 0], [13, 0], [11, 0], [3, 0], [13, 0], [13, 0], [1, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [14, 0], [7, 0], [3, 0], [11, 0], [11, 0], [1, 0], [11, 0], [11, 0], [4, 0], [3, 0], [11, 0], [10, 0], [0, 0], [0, 0], [9, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [1, 0], [11, 0], [11, 0], [8, 0], [9, 0], [2, 0], [8, 0], [11, 0], [1, 0], [13, 0], [1, 0], [13, 0], [13, 0], [13, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [1, 0], [11, 0], [0, 0], [10, 0], [0, 0], [0, 0], [11, 0], [11, 0], [1, 0], [13, 0], [1, 0], [13, 0], [13, 0], [13, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [1, 0], [13, 0], [13, 0], [1, 0], [11, 0], [11, 0], [7, 0], [7, 0], [9, 0], [11, 0], [1, 0], [13, 0], [13, 0], [13, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [14, 0], [10, 0], [0, 0], [3, 0], [11, 0], [6, 0], [1, 0], [11, 0], [4, 0], [0, 0], [11, 0], [1, 0], [13, 0], [13, 0], [13, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [11, 0], [11, 0], [11, 0], [0, 0], [6, 0], [1, 0], [11, 0], [0, 0], [11, 0], [11, 0], [11, 0], [3, 0], [13, 0], [13, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [14, 0], [10, 0], [11, 0], [11, 0], [13, 0], [11, 0], [11, 0], [1, 0], [11, 0], [11, 0], [13, 0], [11, 0], [1, 0], [5, 0], [0, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [14, 0], [6, 0], [11, 0], [1, 0], [13, 0], [13, 0], [1, 0], [11, 0], [11, 0], [11, 0], [11, 0], [11, 0], [8, 0], [9, 0], [0, 0]], [[13, 0], [13, 0], [13, 0], [13, 0], [13, 0], [12, 0], [4, 0], [0, 0], [2, 0], [11, 0], [0, 0], [10, 0], [7, 0], [0, 0], [0, 0], [7, 0], [10, 0], [9, 0], [11, 0], [13, 0]]]
def testroute(m=n):
    grille=creationgrille(m)
    route_complete(grille)
    visu(grille)
    return grille
def testpont(m=n):
    grille=creationgrille(m)
    riviére(grille)
    route_complete(grille)
    visu(grille)
    return grille
def test(m=n):
    grille=creationgrille(m)
    riviére(grille)
    route_complete(grille)
    bâtiments(grille)
    forêt(grille)
    visu(grille)
    
